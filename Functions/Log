#!/bin/bash (source)

Import Terminal

logLevelError=10
logLevelTerse=20
logLevelNormal=30
logLevelVerbose=40
logLevelDebug=50

[ "$logMode" ] || logMode="Normal"

export verboseFD=3
export normalFD=4
export terseFD=5
export errorFD=6
export debugFD=7
export logFD=8
export questionFD=9

if [ -n "$(echo -e)" ]
then
   echo=echo
else
   echo="echo -e"
fi

Is_Log_Mode() {
   [ "$logMode" = "$1" ]
}

Question_Line() {
   $echo -n ${colorNormal}${colorNormal}
}

Log_Function() {
    local message
    Parameters "$@" message color FD
    [ $questionFD = $FD ] && Question_Line
    $echo "${colorGray}${scriptName}:${colorNormal} ${color}$message${colorNormal}" >&$FD
    $echo "$scriptName: $message" >&$logFD
}

Log_Error() {
    Log_Function "$*" "${colorBoldRed}" "${errorFD}"
}

Log_Normal() {
    Log_Function "$*" "${colorCyan}" "${normalFD}"
}

Log_Terse() {
    Log_Function "$*" "${colorBoldCyan}" "${terseFD}"
}

Log_Verbose() {
    Log_Function "$*" "${colorNormal}" "${verboseFD}"
}

Log_Debug() {
    Log_Function "$*" "${colorRedWhite}" "${debugFD}"
}

Quiet() { "$@" &> /dev/null ;}

Verbose() { "$@" 1>&$verboseFD 2>&$verboseFD ;}

# Ask a question. If the answer is "n", quit.
Ask_Continue() {
    if [ "$logLevel" -lt "$logLevelNormal" ]
    then return 0
    fi

    if [ "$1" ]
    then Log_Question "$1"
    fi

    Log_Question "Press Enter to continue or Ctrl-C to cancel."
    read

    if [ "$REPLY" = "n" ]
    then
       exit 1
    fi

    if [ "$?" != "0" ]
    then
       exit $?
    fi
}

Log_Question() {
    Log_Function "$*" "${colorBoldCyan}" "${questionFD}"
}

Ask_Option() {
    local question=$1
    local defaultanswer=$2
    local lambda=$3
    Log_Question "${question}"

    # detsch, maybe this loop should be continued until some valid
    #  response is received
    while true
    do
       read
       #if [ "$REPLY" != "" -o "${questionStream}" = "" ]
       if [ -z "$REPLY" -a -n "${defaultanswer}" ]
       then
          Log_Verbose "Using default answer (${defaultanswer})"
          REPLY="${defaultanswer}"
       fi
       if [ "$REPLY" != "" ] && [ -n "$lambda" ]
       then
          if eval ${lambda}
          then break
          fi
       elif [ -n "$REPLY" ]
       then
          break
       fi
    done

    if [ "$?" != "0" ]
    then
       exit $?
    fi
}

Ask() {
   Parameters "$@" question
   REPLY=foo
   Ask_Option "$question [Y/n]" "yes" '[ -n "$REPLY" -a -z "$(echo $REPLY | sed -r -e "s/((Y|y)(ES|es)?|(N|n)(O|o)?)//")" ]'
   if expr "$REPLY" : "N" >/dev/null || expr "$REPLY" : "n" >/dev/null
   then return 1
   else return 0
   fi
}

Progress_Start() {
    Parameters "$@" message

    echo -n "$message" 1>&2
    echo -n " *" 1>&2
    spinControl=0
}

Progress_Move() {
   case "$spinControl" in
   0) echo -n "|" 1>&2 ; spinControl=1 ;;
   1) echo -n "/" 1>&2 ; spinControl=2 ;;
   2) echo -n "-" 1>&2 ; spinControl=3 ;;
   3) echo -n "\\" 1>&2 ; spinControl=0 ;;
   esac # esac is ridiculous.
}

Progress_End() {
    echo 1>&2
}

# Prints an error message and exits
Die() {
   [ "" = "$*" ] || Log_Error "$@"
   exit 1
}

# Error constants
export errorNotFound=2

# Prints an error message and exits with a given code
Die_With() {
   status=$1
   shift
   [ "" = "$*" ] || Log_Error "$@"
   exit $status
}

# Prints a message and exits successfully
Pass_Away() {
   [ "" = "$*" ] || Log_Error "$@"
   exit 0
}
