#! /usr/bin/zsh (source)
# ZSH code for CommandNotFound support. Sourced from zshrc, but in a separate
# file so it can be updated without going through the UpdateSettings process.

# Defined as separate functions to ease the use of other precmd() functions
# in ~/.zshrc. Behaviour can be disabled by unsetting or redefining precmd().
function CommandNotFound_preexec() {
   # Trim back to the command itself, chopping off everything until
   # a space, pipe, redirect, semicolon or ampersand.
   command="${1%%[|>< ;&]*}"
   # If there's an = in the first word (i.e. an environment variable
   # set on the command line), just ignore this command completely.
   # Do the same when there's something weird with a variable name,
   # escapes, or quoting. They probably know what they're doing.
   [ "$command" != "${command%%[\$=\\\"\'/]*}" ] && command=""
}

function CommandNotFound_precmd() {
   if [ $? -ne 0 ] && [ -n "$command" ]
   then
      whence -- "$command" >& /dev/null ||
         CommandNotFound $command
      unset command
   fi
}

# This initialises the list of precmd/preexec functions so the standard
# function names transparently work. It ensures the entries aren't
# duplicated if this file is sourced more than once.
if [ "$precmd_functions" ]
then
   already=
   for x in "${precmd_functions[@]}"
      [ "CommandNotFound_precmd" = "$x" ] && already=yes
   [ "$already" ] || precmd_functions=( "${precmd_functions[@]}" CommandNotFound_precmd )
else
   precmd_functions=( precmd CommandNotFound_precmd )
fi
if [ "$preexec_functions" ]
then
   already=
   for x in "${preexec_functions[@]}"
      [ "CommandNotFound_preexec" = "$x" ] && already=yes
   [ "$already" ] || preexec_functions=( "${preexec_functions[@]}" CommandNotFound_preexec )
else
   preexec_functions=( preexec CommandNotFound_preexec )
fi
