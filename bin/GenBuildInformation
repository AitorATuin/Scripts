#!/bin/sh

source ScriptFunctions
Import File
Import GoboLinux
Import Log
Import OptionParser
Import Process
Import String
Import Array

### Options ###################################################################

scriptDescription="Generates the list of packages from the current environment used by a GoboLinux package."
scriptCredits="Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<package> [<version>]"
scriptNotes="If no version is specified, Current is assumed. "
Add_Option_Boolean "s" "store" "Store the information in Resources/BuildInformation. Default is standard output."

Parse_Options "$@"
shift $parsedArguments

### Utility functions #################################################################

function extract_dependencies_from_file() {
if [ "$goboCrossCompiling" = "yes" ]
then
   readelf_result=`${cross_compiler}readelf -a "$1" 2> /dev/null | grep "Shared library" | cut -d"[" -f2 | cut -d"]" -f1`
   for i in $readelf_result
   do
      if [ ! -h $goboLibraries/$i ]
      then
         echo "# *Warning*: Unresolved library $i"
      else
        readlink -f "$goboLibraries/$i" | sed "s%$cross_prefix_dir%%g"
      fi
   done
else
   lddresult=`ldd "$1" 2> /dev/null | grep "=>"`
   echo -n "$lddresult"  | grep "not found" | awk '{ print $1 }' | while read i
   do
      echo "# *Warning*: Unresolved library $i"
   done

   echo -n "$lddresult"  | grep -v "not found" | awk '{ print $3 }' | while read i
   do
      if [ ! "$i" ]
      then
         echo "here" "->" "$lddresult"
      fi
      readlink -f "$i"
   done
fi
}

function path2programs() {
#   sed 's@/Programs/\([^/]*\)/\([^/]*\)/.*$@\1 \2@g'
# The follow perl could/should be converted to sed.  Unfortunately I don't know sed.

# I would be glad to convert this to sed, if I had the slightest idea of what this does. :) --hhm
   perl -n -e '$_ =~ m@/([^/]+)/([^/]+)/lib@ && print "$1 $2\n";' \
           -e '$_ =~ m@/([^/]+)/([^/]+)/libexec@ && print "$1 $2\n";' \
           -e '$_ =~ m@/([^/]+)/([^/]+)/bin@ && print "$1 $2\n";' \
           -e '$_ =~ m@/([^/]+)/([^/]+)/sbin@ && print "$1 $2\n";' \
           -e '$_ =~ m@([# ]+.*)@ && print "$1 $2 $3 $4\n";'
}

package=`GuessProgramCase $1 $2`
[ "$2" ] && version="$2" || version="Current"
version=`Get_Version "$package" "$version"`
Is_Directory "$goboPrograms/$package" || Die "Package $package does not exist."
Is_Empty "$version" && Die "Couldn't find a proper version for $package."
prefix=`readlink -f $goboPrograms/$package/$version`
Is_Directory "$prefix" || Die "$package version $version is not a valid package."
dependenciesfile=`Dependencies_File "$package" "$version"`

if Boolean "store"
then
   store="$prefix/Resources/BuildInformation"
   [ -w $store ] || Verify_Superuser
   mkdir -p "$prefix/Resources/"
   exec >$store
fi

### default: Generate a dependency report ###############################################

if [ "$prefix" ]
then
{
   Progress_Start "Generating dependency report. Please wait: "
   {
      if Boolean "all"
      then
         find "$prefix"
      else
         find "$prefix" -path "$prefix/sbin/*" -or \
                        -path "$prefix/bin/*"  -or \
                        -path "$prefix/lib/*"  -or \
                        -path "$prefix/libexec/*"
      fi
   } | while read i
   do
      if [ -x "$i" -a ! -L "$i" -a ! -d "$i" ]
      then
         extract_dependencies_from_file "$i"
      fi
      Progress_Move
   done
   Progress_End
} | path2programs | sort | uniq | grep -v "^$package "
fi
