#!/bin/bash

source ScriptFunctions
Import GoboLinux
Import Log
Import OptionParser
Import File
Import Process
Import String

### Options ###################################################################

scriptDescription="Manages FileHash and FileHash.sig in a GoboLinux package."
scriptCredits="Copyright (C) 2003 Carlo Calica. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="{ [-c] <package> [<version>] }"
scriptNotes="If no version is specified, Current is assumed."
Add_Option_Boolean "c" "check" "check the package's dependency file"
Add_Option_Boolean "s" "sign" "Generate, then sign the hash file"
Add_Option_Boolean "g" "generate" "Generate the hash file."
Add_Option_Boolean "l" "list" "List hash file, if any (generate if not present)."
Add_Option_Entry "u" "local-user" "Use <entry> as the user ID to sign with."
Add_Option_Entry "r" "keyring" "GPG option to an additional the keyring location."
Parse_Options "$@"

### Utility functions #################################################################
FileHash_loc="Resources/FileHash"
FileHash_sig="${FileHash_loc}.sig"
GPG_opts="--keyring ${GPG_gobo_keyring}"

if Is_Entry_Set "local-user" 
then
   localuser=`Entry "local-user"`
   GPG_opts="${GPG_opts} -u $localuser"
fi

if Exists "$HOME/.gnupg/pubring.gpg"
then
   GPG_opts="${GPG_opts} --keyring $HOME/.gnupg/pubring.gpg"
fi

if Is_Entry_Set "keyring"
then
   keyring=`Entry "keyring"`
   GPG_opts="${GPG_opts} --keyring ${keyring}"
fi

### Parse options #######################################################################

package=`GuessProgramCase $(Arg 1) $(Arg 2)`
if [ "$(Arg 2)" ]
then
   version=`Get_Version "$package" "$(Arg 2)"`
else
   version=`Get_Version "$package" "Current"`
fi

prefix="$goboPrograms"

Is_Directory "$goboPrograms/$package" || Die "Package $package does not exist."
Is_Empty "$version" && Die "Couldn't find a proper version for $package."
Is_Directory "$prefix/$package/$version" || Die "$package version $version is not a valid package."
cd "$prefix"

### --generate: create Resources/FileHash################################################
echo "$prefix/$package/$version $FileHash_loc"

if Boolean "generate"
then
   Gen_FileHash "$prefix/$package/$version" "$FileHash_loc"
   exit 0
fi

### --list: List Resources/FileHash ########################################################

if Boolean "list"
then
   if ! Exists "Resources/FileHash"
   then
      # Generate FileHash
      Gen_FileHash "$prefix/$package/$version" "$FileHash_loc"
   fi
   cat "$prefix/Resources/FileHash"
   exit 0
fi

### --sign: sign Resources/FileHash################################################

if Boolean "sign"
then
   Gen_FileHash "$package" "$prefix" "$FileHash_loc"
   gpg=`(which gpg2 || which gpg) 2> /dev/null`
   $gpg ${GPG_opts} --output -  --detach-sig "${FileHash_loc}" | Quiet $sudo tee "${FileHash_sig}"
   
   exit 0
fi

### --check: Verify dependencies ########################################################

if true #Boolean "check"
then
   result=0
   if Exists "${FileHash_sig}"
   then
      Quiet Check_FileSig "${FileHash_loc}" "${FileHash_sig}" 
      rtn=$?
      if [ $rtn -eq "0" ]
      then
         Log_Normal "Digital Signature verified"
      else
         result=$rtn
         Log_Error "Digital Signature check failed: $rtn"
         exit $result
      fi
   fi
   output=`Check_FileHash "$package" "$version" "$FileHash_loc"`
   rtn=$?
   if [ $rtn -eq "0" ]
   then
      Log_Normal "Program integrity verified"
   else
     result=$rtn
     Log_Error "Integrity inconsistency found: $rtn"
     echo "$output"
   fi
   exit $result
fi

