#!/bin/sh

### Changelog ############################################################

# 25/08/2005 - [hisham] general cleanup, -D,--no-default-options switch
# 25/08/2005 - [hisham] remove remains of 'modify files' features
# 22/03/2005 - [hisham] Directories support from IBM
# 11/12/2004 - [lucasvr] Integrated with Compile's cross-compiling feature
# 05/12/2004 - [hisham] -A,--no-autoconf switch
# 10/06/2004 - [calica] Use "GuessProgramCase" to remove case sensitivity
#                       (currently commented out to decide if we want this or not)
# 08/06/2004 - [hisham] -a,--autoconf switch
# 26/05/2004 - [detsch] Ask_Option instead of "read -p"
# 09/05/2004 - [hisham] /System/Links/Tasks
# 30/11/2003 - [hisham] -n,--no-modify switch
#            - -c,--configure switch
# 23/11/2003 - [hisham] Reformatted changelog
# 15/08/2003 - [detsch] Arch no more hardcoded
# 20/06/2003 - [hisham] -t switch
#            - "Modify Makefiles" was accidentally disabled
# 19/06/2003 - [hisham] Fix Shared for -k
# 09/06/2003 - [hisham] 'Variable' directory
# 31/05/2003 - [hisham] Cleanups
# 13/01/2003 - [hisham] Minor documentation fix
# 07/06/2002 - [hisham] Added argument count check
# 30/05/2002 - [hisham] Autodetection for running as superuser
# 26/03/2002 - [hisham] GoboLinux compliant, -n switch
# 08/09/2001 - [hisham] Changed to catch more Makefiles
# 03/09/2001 - [hisham] Converted option parser
# 31/08/2001 - [hisham] switch to /Programs/App/Version scheme
# 26/04/2001 - [hisham] -k -r switches
# XX/XX/XXXX - [hisham] Gradual improvements
# XX/XX/XXXX - [hisham] First version

### Imports ##############################################################

source ScriptFunctions
Import File
Import GoboLinux
Import Log
Import OptionParser
Import Directories

### Options ##############################################################

helpOnNoArguments=yes
scriptDescription="prepares applications for instalation, running the 'configure' script."
scriptCredits="Copyright (C) 2001-2005 Hisham Muhammad - Released under the GNU GPL."
scriptUsage="<target_name> [<version_nr>] [ -- <additional_options> ]"
scriptExample="KDE 2.2"
scriptNotes="The directory hierarchy for the program is only created with --tree."

# This option should be removed; there's no more interaction in this script.
Add_Option_Boolean "b" "batch" "batch mode: no user interaction" 

Add_Option_Boolean "t" "tree" "Prepare directories only, do not attempt to run configure."
Add_Option_Boolean "T" "tree-cleanup" "Like --tree, but instead of creating directories, remove empty ones"
Add_Option_Boolean "k" "keep" "Keep the directory if it already exists in the directory hierarchy."
Add_Option_Boolean "r" "remove" "Remove the directory if it already exists in the directory hierarchy."
Add_Option_Entry   "c" "configure" "Specify program to be used as 'configure' script." "./configure"
Add_Option_Entry   "x" "cross-compile" "Use prefixes as stated by cross-config file."
Add_Option_Boolean "a" "autoconf" "Assume configure is based on autoconf, skipping detection."
Add_Option_Boolean "A" "no-autoconf" "Assume configure is NOT based on autoconf, skipping detection."
Add_Option_Boolean "D" "no-default-options" "Skip detection altogether, use only configure options passed on the command-line."

Parse_Options "$@"
shift $parsedArguments

Is_Entry "configure" && export PATH="$PATH:."

### Functions ############################################################

function config_is_autoconf() {
   Boolean "autoconf" && return 0
   Boolean "no-autoconf" && return 1
   grep -i "Generated .* autoconf" "$configureprogram" &> /dev/null
}

function config_accepts_prefix() {
   grep -- "--prefix" "$configureprogram" &> /dev/null
}

function build_change() {
   echo "/-L/!s/"$1"/"$2"/g;"
}

function color_command() {
   mtailrc=$1
   shift
   workaround=`Temporary_File`
   { "$@" 2>&1
     echo $? > $workaround
   } | mtail --config=${mtailrc} -q
   returnvalue=`cat $workaround`
   rm -- $workaround
   return $returnvalue
}

make_symlink() {
    local bname=`basename $1`
    Exists "${baseprogramdir}/${bname}" && ln -nsf "${baseprogramdir}/${bname}" "$1"
}

remove_symlink() {
    Exists `readlink -f $1` || rm -f -- "$1"
}

### Operation #############################################################

if Is_Entry "cross-compile"
then
	. GoboPath Reload
fi

programname="$1"
[ "$1" ] || Die "Missing argument."
Dir_Set Case && programname=`GuessProgramCase "$1"`
shift
if [ "$1" -a "$1" != "--" ]
then
   versionnumber="$1"
   shift
else
   versionnumber=`Which_Version "${goboPrograms}/${programname}/Current"`
   [ "$versionnumber" ] || Die "Please specify version."
fi

[ "$1" == "--" ] && shift
programname=`NamingConventions "$programname"`

baseprogramdir=`Get_Dir runtime "$programname" ''`
programdir=`Get_Dir runtime "$programname" "$versionnumber"`
settingsdir=`Get_Dir runtimeSettings "$programname" "$versionnumber"`
variabledir=`Get_Dir runtimeVariable "$programname" "$versionnumber"`

Dir_Set Install && installdir=`Get_Dir install "$programname" "$versionnumber"`

if Boolean "tree"
then
   Is_Writable `Get_Dir runtime '' ''` || Verify_Superuser
   Dir_Set Install && `Get_Dir install '' ''` || Verify_Superuser

   ask=yes
   unset keepdir
   Boolean "remove" && unset ask
   Boolean "keep" && { unset ask; keepdir=yes; }
   Boolean "batch" && { unset ask; keepdir=yes; }

   if [ "$ask" -a -e "$programdir" ]
   then
      while true
      do
         Ask_Option "$programdir already exists. [r]emove, [k]eep, [C]ancel?" || exit 1
         case "$REPLY" in
         [Rr])
            rm -rf -- "$programdir"
            break
            ;;
         [Kk])
            keepdir=yes
            break
            ;;
         [Cc])
            exit 1
            ;;
         esac # esac is ridiculous.
      done
   fi

   if [ ! "$keepdir" ]
   then
      if Dir_Set Install
      then
         Make_Directory `Get_Dir install "$programname"`
         Make_Directory "$installdir"
         Make_Directory "$baseprogramdir"
         ( cd "$baseprogramdir" ; ln -s "$installdir" "$versionnumber")
      fi
      if Dir_Set Current
      then
         rm -f -- "$baseprogramdir/Current"
         ( cd "$baseprogramdir" ; ln -s "$versionnumber" "Current" )
      fi
   fi

   if Dir_Set Shared
   then
      [ -L "$programdir/share" ] && rm -- "$programdir/share"
      ln -nsf "$programdir/Shared" "$programdir/share"
   fi

   dirop="Make_Directory"
   linkop="make_symlink"
elif Boolean "tree-cleanup"
then
   Is_Writable `Get_Dir runtime '' ''` || Verify_Superuser
   Dir_Set Install && `Get_Dir install '' ''` || Verify_Superuser

   if Dir_Set Shared
   then
      Is_Real_Directory "$programdir/Shared" || Quiet rm -- "$programdir/share"
   fi

   dirop="Quiet rmdir -p"
   linkop="remove_symlink"
fi

if Boolean "tree" || Boolean "tree-cleanup"
then
   
   $dirop "$settingsdir"
   $dirop "$variabledir"
   $dirop "$programdir/Resources"
   $dirop "$programdir/Resources/Daemons"
   $dirop "$programdir/Resources/Tasks"
   if Dir_Set Shared
   then $dirop "$programdir/Shared"
   else $dirop "$programdir/share"
   fi
   $dirop "$programdir/sbin"
   $dirop "$programdir/bin"
   $dirop "$programdir/lib"
   $dirop "$programdir/include"
   $dirop "$programdir/info"
   $dirop "$programdir/man"
   $dirop "$programdir/doc"
   $dirop "$programdir/libexec"
   $dirop "$programdir/man/man1"
   $dirop "$programdir/man/man2"
   $dirop "$programdir/man/man3"
   $dirop "$programdir/man/man4"
   $dirop "$programdir/man/man5"
   $dirop "$programdir/man/man6"
   $dirop "$programdir/man/man7"
   $dirop "$programdir/man/man8"
   $dirop "$programdir/man/man9"

   if Dir_Set Install
   then
      $linkop `Get_Dir installSettings "$programname" "$versionnumber"`
      $linkop `Get_Dir installVariable "$programname" "$versionnumber"`
   fi

   exit 0
fi

configureprogram=`Entry "configure"`

echo
Log_Normal "Preparing..."
rm -f config.cache

Exists "$configureprogram" || Die "configure script "`[ $configureprogram != "./configure" ] && echo " ($configureprogram) "`"not found."

if Boolean "no-default-options"
then
   configure_options=()
elif config_is_autoconf
then
   Log_Normal "Autoconf configure script detected."
   configure_options=(
      --prefix="$programdir"
      --sysconfdir="$settingsdir"
      --localstatedir="$variabledir" 
   )
elif config_accepts_prefix
then
   Log_Normal "Non-autoconf configure script detected (accepts --prefix)."
   configure_options=(
      --prefix="$programdir"
   )
else
   configure_options=()
fi

color_command ${goboSettings}/Scripts/configure.mtailrc "$configureprogram" "${configure_options[@]}" "$@" >&$normalFD || Die "configure failed."

exit 0
