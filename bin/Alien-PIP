#!/bin/sh

# Shell script implementing the Aliens interface for PIP.
# Packages are installed onto /System/Aliens/PIP. The Python module search path
# must include that directory, either through PYTHONPATH or through a .pth file.
#
# Copyright 2015 Lucas C. Villa Real based on LuaRocks interface by Michael Homer.
# Released under the GNU GPL 2 or later.

. ScriptFunctions
Import Alien

PYTHON=${ALIEN_PYTHON:-python2}
case $PYTHON in
   "python2")
       PIP=pip2
       ;;
   "python3")
       PIP=pip3
       ;;
   *)
       exit 1
       ;;
esac

getversion() {
   local prog=$(echo "$1" | sed 's,\(.*\),\L\1,g')
   local proginfo=$(${PIP} list | sed 's,\(.*\),\L\1,g' | grep "^${prog} ")
   if [ -z "$proginfo" ]
   then exit 1
   else echo "$proginfo | cut -d\( -f2 | cut -d\) -f1"
   fi
}

getinstallversion() {
   prog="$1"
   versions=($(${PYTHON} - << EOF
import json
from distutils.version import StrictVersion
try:
   from urllib2 import urlopen, Request
   def load_json(res):
      return json.load(res)
except ModuleNotFoundError:
   from urllib.request import urlopen, Request
   def load_json(res):
      return json.loads('\n'.join([l.decode() for l in res.readlines()]))
def available_versions(prog):
   try:
      url = "https://pypi.python.org/pypi/%s/json" %prog
      data = load_json(urlopen(Request(url)))
      versions = list(data["releases"].keys())
      versions.sort(key=StrictVersion, reverse=True)
      return versions
   except Exception as e:
      return []
print("\n".join(available_versions("$prog")))
EOF
   ))
   for V in ${versions[@]}
   do
      if In_Version_Range "$2" "$V" "$3"
      then
         echo $V
         return 0
      fi
   done
}

install() {
   local prog="$1"
   local ver="$2"
   local target="$goboSystem/Aliens/PIP"
   local srcdir="$goboData/Compile/Sources"
   if [ ! -d "$target" ]
   then
      mkdir -p "$target" || { echo "Failed to create $target."; exit 1; }
   fi
   ${PIP} install --upgrade --prefix=$target --src=$srcdir "$prog" $ver
   
   Symlink_Aliens "$goboExecutables" "$goboSystem"/Aliens/PIP/bin
}

remove() {
   local prog="$1"
   local ver="$2"

   ${PIP} uninstall "$prog" $ver
   
   Cleanup_Aliens
}

command="$1"
prog="$2"

case "$command" in
   --getversion)
      echo $(getversion "$2")
      ;;
   --getinstallversion)
      echo $(getinstallversion "$2" "$3" "$4")
      ;;
   --greater-than)
      ver=$(getversion "$2")
      latest=$(GuessLatest "$ver" "$3")
      [ "$latest" = "$3" ] && exit 1 || exit 0
      ;;
   --met|--within-range|--interval)
      prog="$2"
      lower="$3"
      upper="$4"
      ver=$(getversion "$2")
	  In_Version_Range "$lower" "$ver" "$upper"
      ;;
   --have-manager)
      which ${PIP} >/dev/null 2>&1 || exit 1
      ;;
   --get-manager-rule)
      echo "PIP >= 7.0.0"
      ;;
   --install)
      install "$2" "$3"
      ;;
   --remove)
      remove "$2" "$3"
      ;;
esac # is ridiculous
