#!/usr/bin/env python

import os
import sys
import os.path
from GuessProgramCase import *
from GetAvailable import *
from GuessLatest import *
from FindPackage import *
from PythonUtils import *

import re

## Optimization
s_blank='[ \t]*'
s_name='([A-Za-z0-9][-A-Za-z0-9_+]*)'
s_operand='(<|>|<=|>=|=)'
s_version='([0-9a-z._\-]+)'

s_cross='(\['+s_blank+'(cross|!cross)'+s_blank+'\])'

new_format = s_name +s_blank+ s_operand +s_blank+ s_version + '('+s_blank+ ',' +s_blank+ s_operand +s_blank+ s_version+')?'+s_blank+s_cross+'?'
new_format_c = re.compile(new_format)

old_format = s_name+s_blank+s_version+'?'+s_blank+s_cross+'?'
old_format_c = re.compile(old_format)

global_wget_timeout = getGoboVariable('timeout', 'Scripts/GetAvailable.conf')
global_dependencies_cache_dir = os.path.expanduser(getGoboVariable('goboUserSettings')+'/dependencies_cache/')
global_dependencies_blacklist = [ i.lower() for i in getGoboVariable('','Scripts/Dependencies.blacklist') ]

global_compatibility_list = {}
for line in getGoboVariable('','Scripts/CompatibilityList') :
	try :
		dependency_x      = line.split(':')[0].strip()
		is_satisfiable_by = line.split(':')[1].split()
		global_compatibility_list[dependency_x.lower()] = is_satisfiable_by
	except :
		pass

if not os.access(global_dependencies_cache_dir, os.R_OK) :
	os.makedirs(global_dependencies_cache_dir)

for i in ['recipe', 'official_package', 'contrib_package', 'local_package'] :
	if not os.access(global_dependencies_cache_dir+i, os.F_OK) :
		os.makedirs(global_dependencies_cache_dir+i)

#############################################################################
# Functions used to identify which rules apply to a given program version
#  type (a specific url can be passed, to avoid calling 'FindpPackage')
#############################################################################

def add_compatible_dependencies(rule) :
	program_name = rule['program'].lower()
	if program_name in global_compatibility_list.keys() :
		for option in global_compatibility_list[program_name] :
			# compatible_rule could also be set to something more related to
			# rule itself (using the same version range, for example).
			compatible_rule = {'program'    : option,
			                   'loincluded' : True,
			                   'lover'      : '',
			                   'hiver'      : '',
			                   'hiincluded' : True,
			                   'optional'   : True }
			rule['option'] = compatible_rule
			rule = compatible_rule # linked list of compatible_rules

# Notice that type may be required since dependencies(recipe(p)) != dependencies(package(p))
def get_rules_for(p, v, r, t, u, noWeb=False, no_compatlist=False, no_builddeps=False, cross_compile=False) :
	depfiles = find_dependencies_files(p, v, r, t, u, noWeb=False, no_builddeps=no_builddeps)
	toReturn = []
	for depfile in depfiles :
		if depfile and os.access(depfile, os.R_OK) :
			f = open(depfile)
			for line in f.readlines() :
				options=line.split("|")
				last_rule = None
				for o in options :
					rule = interpret_dependency_line(o,t, cross_compile=cross_compile) # todo: add exception handling
					if last_rule :
						last_rule['option'] = rule
						last_rule = rule
				if rule :
					if not no_compatlist :
						add_compatible_dependencies(rule)
					toReturn.append(rule)
			f.close()
	return toReturn


global_not_found_cache=[]
def find_dependencies_files(p, v, r, t, u=None, noWeb=False, no_builddeps=False):
	if t == 'installed' :
		p = GuessProgramCase(p, v)
		localdep = Get_Dir('runtime', p, v)+"/Resources/Dependencies"
		if os.access(localdep, os.R_OK) :
			return [ localdep ]

	elif t == 'local_package' :
		if not u or os.access(u, os.R_OK) :
			ret = FindPackage(p, v, r, types=[t], availables=global_available_packages_cache, accessWeb = not noWeb)
			if ret :
				p,v,r,t,u = ret[0]
		if u :
			if os.path.isdir(u) :
				if os.access(u+'/Resources/Dependencies', os.R_OK) :
					return [ u+'/Resources/Dependencies' ]
			else :
				cachedep = global_dependencies_cache_dir+'/'+t+'/'+ u.split('/')[-1]
				if os.access(cachedep, os.R_OK) :
					return [ cachedep ]

				err = os.system('tar xvfj %s -O %s/%s/Resources/Dependencies 2> /dev/null > %s'%(u,p,v,cachedep))
				if err == 0:
					return [ cachedep ]
				else :
					os.remove(cachedep)

	elif t == 'recipe' :
		if u :
			if no_builddeps :
				return [ u+'/Resources/Dependencies' ]
			else :
				return [ u+'/Resources/Dependencies', u+'/Resources/BuildDependencies' ]
		# searches local recipes first
		compileRecipeDirs, getRecipeStores = getCompileOptions()
		for compileRecipeDir in compileRecipeDirs :
			recipedir=compileRecipeDir+'/'+p+'/'+v+'/'
			if os.access(recipedir+'Recipe', os.R_OK) :
				if no_builddeps :
					return [ recipedir+'/Resources/Dependencies' ]
				else :
					return [ recipedir+'/Resources/Dependencies', recipedir+'/Resources/BuildDependencies' ]

	if t in [ 'official_package', 'contrib_package', 'recipe' ] :
		if not u:
			ret = FindPackage(p, v, r, types=[t], availables=global_available_packages_cache, accessWeb = not noWeb)
			if ret :
				u = ret[0][4]
		
		cachedep = global_dependencies_cache_dir+'/'+t+'/'+ u.split('/')[-1]
		if os.access(cachedep, os.R_OK) :
			return [ cachedep ]

		if u and not noWeb :
			temp = u.split('/')
			dependency_u = string.join(temp[:-1]+['dependencies']+[temp[-1]],'/')
			if not dependency_u in global_not_found_cache :
				err = os.system('wget --timeout='+global_wget_timeout+' -q -O '+cachedep+' '+dependency_u)
				if err == 0:
					return [ cachedep ]
				else :
					global_not_found_cache.append(dependency_u)
					os.remove(cachedep)

	if t == 'recipe' and not noWeb :
		# gets remote recipe, if no cache was found
		if u :
			f = os.popen('GetRecipe %s 2> /dev/null'%(u))
		else :
			f = os.popen('GetRecipe %s %s 2> /dev/null'%(p,Join_Version_Revision(v,r)))
		s = f.read().strip()
		ret = f.close()
		if s:
			return [ s+'/Resources/Dependencies', s+'/Resources/BuildDependencies' ]

	sys.stderr.write('Dependencies for %s %s %s %s %s not found\n'%(p,v,r,t,u))
	return []

def interpret_dependency_line(line, t=None, cross_compile=False) :
	line = line.split('#')[0].strip()
	if not line :
		return

	global global_dependencies_blacklist
	m = new_format_c.match(line)
	if m :
		if (m.group(1).lower() in global_dependencies_blacklist) :
			return
		if ((m.group(8) == 'cross' and not cross_compile) or (m.group(8) == '!cross' and cross_compile)) :
			return

		ret = {'program'    : m.group(1),
		       'loincluded' : True,
		       'lover'      : '',
		       'hiver'      : '',
		       'hiincluded' : True,
		       'optional'   : True }
		for i in [2, 5] :
			op = m.group(i)
			if not op :
				break
			if '=' == op :
				ret['hiver'] = ret['lover'] = m.group(i+1)
				ret['hiincluded'] = True
			else :
				if '>' in op :
					limit = 'lo'
				else :
					limit = 'hi'
				ret[limit+'ver']      = m.group(i+1)
				ret[limit+'included'] = '=' in m.group(i)
	else :
		m = old_format_c.match(line)
		if m :
			if (m.group(1).lower() in global_dependencies_blacklist) :
				return
			if ((m.group(4) == 'cross' and not cross_compile) or (m.group(4) == '!cross' and cross_compile)) :
				return

			ret = {'program'    : m.group(1),
			       'lover'      : m.group(2),
			       'loincluded' : True,
			       'hiver'      : '',
			       'hiincluded' : False,
			       'optional'   : True }
			if t == 'recipe' :
				ret['lover'] = ''
		else :
			raise Exception("Parse error")
	return ret

#############################################################################
# Function that interpret the semantic of the rule,
#  and compares it to a given version
#############################################################################

def does_version_match_rule(version, rule) :
	loOk=True
	hiOk=True
	if rule['lover'] :
		loOk=False
		if rule['loincluded'] or rule['lover'] != version :
			if GuessLatest([version,rule['lover']]) == version :
				loOk=True

	if rule['hiver'] :
		hiOk=False
		if rule['hiincluded'] or rule['hiver'] != version :
			if GuessLatest([version,rule['hiver']]) != version :
				hiOk=True

	if loOk and hiOk :
		#print 'Version:',version,' does match ',rule
		return True
	else :
		#print 'Version:',version,' does NOT match ',rule
		return False

#############################################################################
# Function that try to match the given rule against the installed programs
#  and available packages/recipes
#############################################################################

# This cache variable is reset at each CheckDependencies call
global_available_packages_cache = {}

def version_range_string(r) :
	ss = ''
	if r['lover'] :
		ss += ' ' + (r['loincluded'] and '>=' or '>') + ' ' + r['lover']
	if r['hiver'] :
		if r['lover'] :
			ss += ','
		ss += ' ' + (r['hiincluded'] and '<=' or '<') + ' ' + r['hiver']
	return ss

def find_matching_package(rule, acceptable_types, noWeb=False) :
	global global_available_packages_cache
	if not global_available_packages_cache :
		global_available_packages_cache = GetAvailable(types=['installed','local_package','official_package', 'recipe', 'contrib_package', 'tracked'], accessWeb=not noWeb)

	available_options = FindPackage(rule['program'], types=acceptable_types, availables=global_available_packages_cache, accessWeb = not noWeb)

	if available_options :
		for p,v,r,t,u in available_options :
			if does_version_match_rule(v, rule) :
				return (p, v, r, t, u)
		to_return = ((rule['program'], version_range_string(rule).replace(' ',''), '', None, "NO_VERSION"))
	else :
		to_return = ((rule['program'], None, '', None, "NO_PROGRAM"))

	# if we got here, no matching program/version was found.
	if rule.has_key('option') :
		ret = find_matching_package(rule['option'], acceptable_types, noWeb)
		if ret and ret[3] : # ret[3] corresponds to 'type'
			return ret

	return to_return

#############################################################################
# User interaction Functions
#############################################################################

global_always_do=None
def ask_if_install(match) :
	p,v,r,t,u=match
	global global_always_do

	installed = FindPackage(p,types=['installed'])
	if installed :
		reason = p + " is installed, but version "+installed[0][1]+" does not match given dependency."
	else :
		reason = p + " is not installed."

	if t == None :
		Log_Terse('%s\nUnable to fulfill the dependency.'%(reason), 'CheckDependencies')
		return

	if install_optional == 'never' :
		Log_Terse('%s'%(reason))
		return

	if global_always_do :
		if global_always_do=='install/compile' :
			if t == 'recipe' :
				action = "Compiled"
			else :
				action = "Installed"
		else :
			action = 'Skipped'

		Log_Terse("%s\n%s %s (%s) will be %s"%(reason,p,v,t,action), 'CheckDependencies')

		if global_always_do == 'install/compile' :
			return True
		else :
			return False

	while True :
		if t == 'recipe' :
			action = "Compile"
		else :
			action = "Install"
		yes = action[0]
		reply = Ask_Option('%s\n%s %s for %s %s or skip this dependency? [%s]%s/[S]Skip/[%sA]%s All/[SA]Skip All'%(reason,action,t,p,v,yes,action,yes,action), 'CheckDependencies')
		if reply :
			if reply[0] in [yes.lower() ,'s'] :
				install = (reply[0] == yes.lower())
				if len(reply) >= 2 and reply[1] == 'a' :
					if reply[0] == yes.lower() :
						global_always_do = 'install/compile'
					else :
						global_always_do = 'skip'
				return install
	return True

#############################################################################
# Hi-level Functions
#############################################################################

#
# Recursivelly identifies the dependencies for a given package / recipe as long as a 'solution' for each one
#
def get_all_dependencies_and_matches_for( p, v=None, r='', t=None, u=None,
	                                    acceptable_types=None, mode='missing', recursive=True, hook=None,
	                                    noWeb=False, add_self='if_required', install_optional='ask', ask_hook=None,
	                                    all_matches = None, no_compatlist=False, cross_compile=False):
	ordered_matches, ordered_rules = [], []
	self_match, self_rule = None, None

	if all_matches == None :
		global_available_packages_cache = {}
		global_always_do = None
		all_matches = []
		first_call = True
	else :
		first_call = False

	if not acceptable_types :
		acceptable_types = getGoboVariable('defaultRepositories', 'Scripts/FindPackage.conf', True)

	if (add_self == 'always') or (add_self != 'never' and (not v or not t))  :
		if t :
			ret = FindPackage(p, v, r, types=[t], accessWeb=not noWeb)
		else :
			ret = FindPackage(p, v, r, types=['installed'], accessWeb=not noWeb)
			if not ret :
				ret = FindPackage(p, v, r, accessWeb=not noWeb)

		if not ret :
			return [], []

		self_rule = { 'program':p, 'lover':'', 'loincluded':False, 'hiver':'', 'hiincluded':False, 'optional':True }
		self_match = ret[0]
		all_matches.append(self_match)
		p,v,r,t,u = self_match

	all_rules = get_rules_for(p, v, r, t, u, noWeb=noWeb, no_compatlist=no_compatlist, cross_compile=cross_compile)
	# optimization only:
	#all_rules  = [ rule for rule in all_rules if not any(pp == rule['program'] for pp,vv,tt,uu in all_matches) ]
	missing_dependencies = [ rule for rule in all_rules if not find_matching_package(rule, ['installed'], noWeb=noWeb) ]
	for rule in all_rules :
		if hook :
			hook("Checking dependencies", len(all_matches), len(all_matches)+1)

		if mode == 'missing' and find_matching_package(rule, ['installed'], noWeb=noWeb)[3] :
			continue

		if mode == 'all' :
			match = find_matching_package(rule, acceptable_types, noWeb=noWeb) # (program, version, type, site)
		else :
			match = find_matching_package(rule, ['installed']+acceptable_types, noWeb=noWeb) # (program, version, type, site)
			if mode == 'updating' and match[3] == 'installed' :
				continue

		# Note: if no package is found, find_matching_package returns a
		#       tuple with None in the place of type
		if not match in all_matches :
			all_matches.append(match) # we append before, to avoid asking twice for a package that is meant to be skipped

			if mode != 'all' :
				# Asking here!
				if install_optional == 'never' or (install_optional == 'ask' and ask_hook and not ask_hook(match)) :
					continue

			pp, vv, rr, tt, uu = match
			if tt and recursive :
				rr, mm = get_all_dependencies_and_matches_for(pp, vv, rr, tt, uu, acceptable_types, mode, recursive, hook=hook, all_matches=all_matches, ask_hook=ask_hook, install_optional=install_optional, noWeb=noWeb)
				ordered_matches += mm
				ordered_rules += rr

			# Using recursion in our favor: appending after recursion returns ensures an
			#  automatic correct output ordering (which is indeed nice :)
			# Note that this explains why two lists are used (ordered_matches and all_matches:
			#  the later being responsible to avoid infinite recursion on circular dependencies)
			ordered_matches.append(match)
			ordered_rules.append(rule)

	if self_match and self_rule:
		#rule = self_rule
		#ret_type = find_matching_package(rule, ['installed'], noWeb=noWeb)[2]
		#if not ((mode == 'missing' and ret_type) or (mode == 'updating' and ret_type == 'installed')) :
		ordered_matches.append(self_match)
		ordered_rules.append(self_rule)

	if hook and first_call:
		hook("Checking dependencies", len(all_matches), len(all_matches))

	return ordered_rules, ordered_matches


#
# This function is used when mode == 'convert'
#  simple implementation for now
#
def ConvertRecipeToBinary(p, v, r, t, u) :
	global global_dependencies_blacklist
	global_dependencies_blacklist = []
	rules = get_rules_for(p, v, r, t, u, noWeb=True, no_compatlist=True, no_builddeps=True)
	goboPrograms = getGoboVariable('goboPrograms')
	ret = ''
	for rule in rules:
		cmd='''
. ScriptFunctions
Import GoboLinux
Get_Version %s Current'''%rule['program']
		f = os.popen(cmd)
		installed_version = f.read().strip()
		f.close()
		ret += rule['program'] + ' >= ' + installed_version
		if rule['hiver'] :
			ret += ', ' + (rule['hiincluded'] and '<= ' or '< ') + rule['hiver']
		ret += '\n'
	return ret

#
# This function is used when mode == 'list'
#
def ListDependencies(p, v, r, t, u, mode = 'terminal', types=None, report_missing=False, report_updating=False, recursive=True, hook=None, noWeb=False, cross_compile=False) :
	if not types :
		types = getGoboVariable('defaultRepositories', 'Scripts/FindPackage.conf', True)

	all_rules, all_matches = get_all_dependencies_and_matches_for(p,v,r,t,u, types, recursive=recursive, hook=hook, mode='all', noWeb=noWeb, cross_compile=cross_compile)

	if report_missing :
		missing_dependencies      = [ rule for rule in all_rules if not find_matching_package(rule, ['installed'], noWeb=noWeb)[3] ]
		missing_programs          = [ rule for rule in missing_dependencies if 'NO_PROGRAM' == find_matching_package(rule, ['installed'], noWeb=noWeb)[4] ]
		unresolvable_dependencies = [ rule for rule in missing_dependencies if not find_matching_package(rule, ['installed']+types, noWeb=noWeb)[3] ]

	if report_updating :
		updating_dependencies          = [ rule for rule in all_rules if not find_matching_package(rule, ['installed']+types, noWeb=noWeb)[3] == 'installed' ]
		tracked_is_higher_dependencies = [ rule for rule in all_rules if find_matching_package(rule, ['installed']+types+['tracked'], noWeb=noWeb)[3] == 'tracked' ]

	if mode == 'terminal' :
		s = ''
		for rule in all_rules :
			ss  = rule['program']
			if rule['lover'] :
				ss += ' ' + (rule['loincluded'] and '>=' or '>') + ' ' + rule['lover']
			if rule['hiver'] :
				if rule['lover'] :
					ss += ','
				ss += ' ' + (rule['hiincluded'] and '<=' or '<') + ' ' + rule['hiver']

			if report_missing and rule in missing_dependencies :
				ss += ' M' + (rule in missing_programs and 'P' or 'V')
			if report_updating and rule in updating_dependencies :
				ss += ' U'
			s += ss + '\n'
		return s.strip()

	elif mode == 'html' :
		s = '<p><font color="#000077"><b>['+'Dependencies'+'] </b></font><br>'
		for rule in all_rules :
			ss=''
			if report_missing and rule in missing_dependencies :
				if rule in missing_programs :
					ss += '<font color="#FF0000">'
					if rule in unresolvable_dependencies : ss += '<b>'
				else :
					ss += '<font color="#000000">'
			else :
				ss += '<font color="#000000">'

			ss += rule['program']

			if report_missing and rule in missing_dependencies :
				if report_missing and not rule in missing_programs :
					ss += '</font><font color="#FF0000">'
					if rule in unresolvable_dependencies : ss += '<b>'
			elif report_updating and rule in updating_dependencies :
				ss += '</font><font color="#0000FF">'
			elif report_updating  and rule in tracked_is_higher_dependencies :
				ss += '</font><font color="#00BB00">'

			if rule['lover'] :
				ss += ' ' + (rule['loincluded'] and '>=' or '>') + ' ' + rule['lover']

			if rule['hiver'] :
				if rule['lover'] : ss += ','
				ss += ' ' + (rule['hiincluded'] and '<=' or '<') + ' ' + rule['hiver']

			if rule in unresolvable_dependencies : ss += '</b>'
			s += ss + '</font><br>'+'\n'

		if not all_rules : s += '<font color="#000000">-</font><br>'
		return s
	else :
		return rules

#
# This function is used only in Manager at this time
#
def does_x_depend_on_y(x, py, acceptable_types=None, all_programs=None, hook=None, noWeb=False) :
	px, vx, rx, tx, ux = x
	if all_programs == None :
		all_programs = []

	if px.lower() == py.lower() :
		return True

	for rule in get_rules_for(px, vx, rx, tx, ux) :
		if hook :
			hook()
		p = rule['program']
		if p.lower() == py.lower() :
			return True
		if not p in all_programs :
			all_programs.append(p)
			match = find_matching_package(rule, acceptable_types, noWeb=noWeb) # (program, version, type, site)
			pp, vv, rr, tt, uu = match
			if tt :
				x = does_x_depend_on_y((pp, vv, rr, tt, uu), py, acceptable_types, all_programs, hook=hook)
				if x :
					return True
	return False


#############################################################################
# Main
#############################################################################
CheckDependencies=get_all_dependencies_and_matches_for

if __name__ == '__main__' :
	try :
		import sys
		import getopt, os

		try :
			if not sys.argv[1:] :
				sys.argv[1:] = [ '--help' ]
			opts, args = getopt.getopt(sys.argv[1:], 't:m:s:i:bWRBCh', ['add-self=','install-optional=', 'batch','types=', 'type=', 'mode=', 'no-web', 'no-recursive', 'no-blacklist', 'quiet-progress', 'no-compatlist', 'cross-compile', 'help'])
		except getopt.GetoptError, detail :
			print sys.argv[0].split('/')[-1]+': '+str(detail)
			sys.exit(1)

		validTypes = ['installed', 'local_package', 'official_package', 'recipe', 'contrib_package', 'tracked', 'all']
		types =  None
		mode = 'missing'
		recursive = True
		noWeb = False
		add_self='if_required'
		progress_hook=consoleProgressHook
		install_optional = 'ask'
		no_compatlist = False
		cross_compile = False
		for o, a in opts :
			if o in ['--types','--type', '-t'] :
				types = a.split(',')
				for i in range(len(types)) :
					if len (types[i]) == 1 :
						for t in validTypes :
							if types[i][0] == t[0] :
								types[i] = t
								break
				if 'all' in types :
					types = validTypes[:-1] # don't include 'all'
			elif o in ['--mode','-m'] :
				mode = a
			elif o in ['--no-recursive','-R'] :
				recursive = False
			elif o in ['--quiet-progress'] :
				progress_hook=None
			elif o in ['--add-self','-s'] :
				add_self=a
			elif o in ['--install-optional','-i'] :
				install_optional=a
				if install_optional == 'always' :
					global_always_do = 'install/compile'
			elif o in ['--batch', '-b'] :
				install_optional = 'always'
				global_always_do = 'install/compile'
			elif o in ['--no-web', '-W'] :
				noWeb = True
			elif o in ['--no-blacklist', '-B'] :
				global_dependencies_blacklist = []
			elif o in ['--no-compatlist', '-C'] :
				no_compatlist = True
			elif o in ['--cross-compile'] :
				cross_compile = True
			elif o in ['--help', '-h'] :
				print """
CheckDependencies
 Check dependencies. No decent help yet.

Options:
 -t [t1,t2,...]
 --types=[t1,t2,...]  Sets what kind of packages repositories that can be
                      searched to match the dependencies.
                      Default list is set at Settings/Scripts/FindPackage.conf

 -s
 --add-self=          Tell if the program passed as parameter should be
                      returned too.

                      Can be set to:
                         never       - do not return the passed program
                         always      - return the passed program
                         if_required - return the passed program iff type or
                                       version from the program was not passed
                                       as paramater (default)

 -i
 --install-optional=  Install optional dependencies? 'always', 'never', 'ask'

 -b
 --batch              Same as --install-optional=always

 -m, --mode=          Can be set to:
                         missing  - report matches only for missing packages
                         updating - report all packages (dependencies from the
                                    passed program) that can be updated
                         all      - report matches for all dependencies, even
                                    it they are already installed
                         list     - only list the dependencies, without printing
                                    matches
                         convert  - convert a Dependencies file of a recipe to
                                    the coresponding Dependencies file for the
                                    compiled binary

 -W, --no-web         Do not access the internet.

 -R
 --no-recursive       Only the direct dependencies are considered

 -B
 --no-blacklist       Do not skip packages listed at Dependencies.blacklist

 --quiet-progress     Do not show progress indicator

 --cross-compile      Check dependencies for cross compilation

Examples of usage:
 CheckDependencies kde-libs 3.5.0
 CheckDependencies kde-libs 3.5.0 recipe
 CheckDependencies -t official_package,recipe kde-libs 3.5.0 recipe
 CheckDependencies -t official_package,recipe kde-libs 3.5.0 recipe
 """
				sys.exit(0)

		if len(args) >= 1 : p = args[0]
		else :              sys.exit(1)

		if len(args) >= 2 : vr = args[1]
		else :              vr = None

		if len(args) >= 3 : t = args[2]
		else :              t = None

		if len(args) >= 4 : u = args[3]
		else :              u = None


		if vr :
			v,r = Split_Version_Revision(vr)
		else :
			v,r = '',''
		if mode == 'list' :
			print ListDependencies(p,v,r,t,u,types=types,recursive=recursive,hook=progress_hook,noWeb=noWeb,cross_compile=cross_compile)
		elif mode == 'convert' :
			print ConvertRecipeToBinary(p,v,r,t,u),
		else :
			rules, matches = get_all_dependencies_and_matches_for(p, v, r, t, u, types, mode=mode, recursive=recursive,
			                     noWeb=noWeb, hook=progress_hook, add_self=add_self, ask_hook=ask_if_install, no_compatlist=no_compatlist, cross_compile=cross_compile)
			if rules :
				for rule,match in zip(rules,matches):
					pp,vv,rr,tt,uu=match
					print pp, Join_Version_Revision(vv,rr), tt, uu
			sys.exit(0)
	except KeyboardInterrupt :
		sys.exit(1)

