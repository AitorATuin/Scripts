#!/bin/bash

### Changelog #################################################################

# 10/06/2004 - [calica] Use "GuessProgramCase" to remove case sensitivity
# 31/05/2003 - Cleanup
# 03/06/2002 - Removed sudos, added VerifyGobo in proper places.
# 07/05/2002 - Added sudos. Need to fix this later.
# 22/04/2002 - New ScriptFunctions
# 03/10/2001 - Bug fix in --
# 03/09/2001 - Fixed option parser
# 23/08/2001 - First version

source ScriptFunctions
Import File
Import Log
Import OptionParser

### Options ###################################################################

scriptDescription="Install LodeLinux/GoboLinux packages :-)"
scriptCredits="Copyright (C) 2001-2002, Hisham Muhammad - Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<options> <archive-file> [<package-name> [<version>]] [ -- <extra-options>]"
scriptNotes="Any extra options passed after '--' will be passed to 'configure'."
scriptExample="-m linux-i386 weirdsuperlib-1.4k.tar.gz WeirdSuperLib 1.4k -- --with-shared"
Add_Option_Boolean "b" "batch" "Batch mode: do not show documentation and do "\
"not ask for confirmations."
Add_Option_Boolean "k" "keep" "Keep any existing directory structure at "\
"'${goboPrograms}/<package-name>/Current'."
Add_Option_Boolean "r" "remove" "Remove any existing directory structure from "\
"'${goboPrograms}/<package-name>/Current' prior to compilation."
Add_Option_Entry   "m" "make-target" "Specify a specific target to the 'make' "\
"command."

Parse_Options "$@"
shift $parsedArguments

### Utility functions ########################################################

# Strip archive extension (stripping .tar too if necessary)
function strip_extension() {
   local stripped
   stripped=`echo "$1" | sed 's/\.[^\.]*$//'`
   if [ `echo "$stripped" | sed 's/.*\.//'` = 'tar' ]
   then
      stripped=`basename "$stripped" .tar`
   fi
   echo "$stripped"
}

# Given two names, return the most appropriate one
function choose_name() {
   local onehyphen twohyphen
   function do_grep() {
      echo "$2" | grep "$1" &> /dev/null
   }
   do_grep "$1" "-"
   onehyphen=$?
   do_grep "$2" "-"
   twohyphen=$?
   if [ $onehyphen -eq 0 -a $twohyphen -gt 0 ]
   then
      better="$1"
   elif [ $twohyphen -eq 0 -a $onehyphen -gt 0 ]
   then
      better="$2"
   else
      better="$1"
   fi
   echo "$better"
}

function display_file() {
   local temp
   if Exists "$1"
   then
      temp=`Temporary_File`
      {
         echo "Installing $packagename, version $versionnumber -- $1 file" 
         echo "==============================================================================="
         echo
         cat "$1"
      } > $temp
      less $temp
      rm -- $temp
   fi
}

function do_make() {
   ColorMake "$@"
}

### Parse command line #######################################################

location=`readlink -f "$1"`
shift

if [ -n "$1" -a "$1" != "--" ]
then
   packagename="$1"
   shift
   if [ -n "$1" -a "$1" != "--" ]
   then
      versionnumber="$1"
      shift
   fi
   packagename=`GuessProgramCase $packagename $versionnumber`
fi

if [ "$1" == "--" ]
then
   shift
fi

### Process first argument (directory or archive) ############################

if Is_Directory "$location"
then
   # Pick from a location (usually ".")
   directoryname="$location"
   bname=`basename "$directoryname"`
else
   aunpack "$location"
   directoryname=`als -q "$location" | head -n 1`
   packageBaseName=`strip_extension "$location"`
   bname=`choose_name "$directoryname" "$packageBaseName"`
fi

### Determine program and version if necessary ###############################

cd "$directoryname"

if ! [ "$packagename" ]
then
   packagename=`echo "$bname" | sed 's/-[[:digit:]].*//g'`
   deduced=`DeduceName "README" "$packagename"`
   [ "$deduced" ] && packagename=$deduced
fi

# Enforce some naming conventions
packagename=`NamingConventions "$packagename"`

if ! [ "$versionnumber" ]
then
   versionnumber=`echo "$bname" | sed 's/.*-\([[:digit:]].*\)/\1/;s/\///g;'`
fi

### Display documentation ####################################################

Log_Normal "Installing $packagename, version $versionnumber."
if ! Boolean "batch"
then
   display_file README
   [ "`md5sum INSTALL 2> /dev/null`" != "0d6be33865b76025c20b48bcac87adb7  INSTALL" ] && display_file INSTALL || {
      Log_Verbose "Program uses a standard 'configure' procedure. INSTALL file not displayed."
   }
   echo
   echo "Press Enter to install $packagename version $versionnumber or Ctrl-C to cancel."
   read
   echo
fi

### Finally, wrap PrepareProgram, make and SymlinkProgram ####################

Boolean "remove" && prepmode="-r"
Boolean "keep" && prepmode="-k"
Boolean "batch" && batchmode="-b"

PrepareProgram $batchmode "$packagename" "$versionnumber" "$@" || Die "Preparation step aborted."
time do_make `Entry "make-target"` || Die "Build process failed"
PrepareProgram -t $prepmode "$packagename" "$versionnumber" || Die "Cannot build program tree."
SandboxInstall "$packagename" "$versionnumber" || Die "Installation step failed."
SymlinkProgram "$packagename" || Die "Linkage step failed."

Log_Verbose "Installation of $packagename, version $versionnumber, is complete."
