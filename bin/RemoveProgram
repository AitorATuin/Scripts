#!/bin/bash

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux 
Import OptionParser


### Options ###################################################################

scriptDescription="Removes a program version from the system."
scriptCredits="Copyright (C) 2004 Andre Detsch. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<program> <version>"
scriptExample="Qt 3.2.3"
Add_Option_Boolean "b" "batch" "Do not ask for confirmation."
Add_Option_Entry "u" "unmanaged" "Defines what to do with unmanaged files "\
"from package. Options available are \"ask\", \"remove\" and \"keep\"." "ask"
Parse_Options "$@"

### Operation #################################################################

Verify_Superuser
appname=$(Arg 1)
appver=$(Arg 2)
[ "${appname}" ] || Die "Argument missing: specify the program name."
[ "${appver}" ] || Die "Argument missing: specify the program version."

program=`GuessProgramCase ${appname} ${appver}`
version=${appver}

if [ ! -d ${goboPrograms}/${program}/${version} ]
then
   Die "${program} ${version} not found at ${goboPrograms}"
fi

Log_Terse "Removing $program, version $version."

Log_Verbose "Getting program file list..."
filesdir=$(Get_System_Paths "${goboPrograms}/${program}/${version}")

Is_Real_Nonempty_Directory "${goboPrograms}/${program}/${version}/Shared/mime/packages" && rebuildmimedb=true

Log_Normal "Removing ${goboPrograms}/${program}/${version}..."
if [ -f ./Resources/UnmanagedFiles ] && ! Is_Entry "unmanaged" "keep"
then
   { Is_Entry "unmanaged" "ask" && ! Ask "There are unmanaged files present. Do you want to remove them?"; } || Uninstall_Unmanaged_Files "${goboPrograms}/$program/$version/Resources/UnmanagedFiles"
fi
rm -rf -- ${goboPrograms}/${program}/${version}

# TODO relink current?
Quiet RemoveBroken "${goboPrograms}/${program}/Current"
Quiet rmdir ${goboPrograms}/${program}

Log_Normal "Removing broken links..."
echo "$filesdir" | RemoveBroken || Log_Error "Couldn't cleanup links."

#Log_Normal "Rebuilding Environment Cache file..."
#yes | RebuildLinks -n
[ "${rebuildmimedb}" = "true" ] && Rebuild_MIME_Database

Gen_Env_Cache

Log_Normal "${program} ${version} removed."
