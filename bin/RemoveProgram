#!/bin/sh

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux 
Import OptionParser


### Options ###################################################################

scriptDescription="Removes a program version from the system."
scriptCredits="Copyright (C) 2004 Andre Detsch. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<program> <version>"
scriptExample="Qt 3.2.3"
Add_Option_Boolean "b" "batch" "Do not ask for confirmation."
Add_Option_Entry "u" "unmanaged" "Defines what to do with unmanaged files "\
"from package. Options available are \"ask\", \"remove\" and \"keep\"." "ask"
Parse_Options "$@"
shift $parsedArguments

### Operation #################################################################

Verify_Superuser

[ "$1" ] || Die "Argument missing: specify the program name."
[ "$2" ] || Die "Argument missing: specify the program version."

program=`GuessProgramCase $1 $2`
version=$2

if [ ! -d ${goboPrograms}/${program}/${version} ]
then
   Die "${program} ${version} not found at ${goboPrograms}"
fi

Log_Terse "Removing $program, version $version."

Log_Verbose "Getting program file list..."
filesdir=`mktemp`
cd ${goboPrograms}/${program}/${version}
find > $filesdir
GrepReplace "./lib/"     "./Libraries/"    $filesdir
GrepReplace "./sbin/"    "./Executables/"  $filesdir
GrepReplace "./bin/"     "./Executables/"  $filesdir
GrepReplace "./man/"     "./Manuals/"      $filesdir
GrepReplace "./include/" "./Headers/"      $filesdir
GrepReplace "./info/"    "./Manuals/info/" $filesdir
GrepReplace "./Resources/Wrappers/" "./Executables/"  $filesdir

Log_Normal "Removing ${goboPrograms}/${program}/${version}..."
if [ -f ./Resources/UnmanagedFiles ] && ! Is_Entry "unmanaged" "keep"
then
   { Is_Entry "unmanaged" "ask" && ! Ask "There are unmanaged files present. Do you want to remove them?"; } || Uninstall_Unmanaged_Files "${goboPrograms}/$program/$version/Resources/UnmanagedFiles"
fi
rm -rf -- ${goboPrograms}/${program}/${version}

# TODO relink current?
Quiet RemoveBroken "${goboPrograms}/${program}/Current"
Quiet rmdir ${goboPrograms}/${program}

Log_Normal "Removing broken links..."
cd ${goboLinks}
RemoveBroken < $filesdir
rm -- $filesdir


#Log_Normal "Rebuilding Environment Cache file..."
#yes | RebuildLinks -n

Log_Normal "Rebuilding environment cache..."
cache="$goboEnvironment"/Cache
rm -- "$cache"
for linkedfile in "$goboEnvironment"/*
do
   [ -f "$linkedfile" ] && cat "$linkedfile" >> "$cache"
   echo >> "$cache"
done

Log_Normal "${program} ${version} removed."
