#!/bin/sh

source ScriptFunctions
Import OptionParser
Import GoboLinux
Import File
Import String

######## Exit Codes #######
# 0    Normal/no error
# 1    Unable to generate FileHash
# 2    No GnuPG or private key
# 3    Unable to sign FileHash

######## Changelog ########

# 09/19/2005 - [calica] Better error code handling
# 09/12/2005 - [calica] Check for gpg keyring and gpg
# 09/11/2005 - [calica] Move GPG_gobo_keyring to Functions/File
# 2004/06/30 - [calica] use --keyring rather than --homedir
# 2004/05/27 - [ecd] splitted 'Hashes' file in more files (SignPackage, VerifyPackage)
#            - added "local-user" option
#            - signing only with keys from $HOME
#            - description adapted to splitted version
# 2003/12/15 - [calica] First version

###########################

scriptDescription="Generate and sign a hash file of a Gobolinux package with gpg."
scriptCredits="Copyright (C) 2003 Carlo Calica. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="{ [<options>] <package> [<version>] }"
scriptNotes="If no version is specified, Current is assumed.  "\
"If the -u option isn't used, the first ID found in the secret keyring is used."

########## Options ##########
Add_Option_Entry "u" "local-user" "Use <entry> as the user ID to sign with."
Add_Option_Boolean "S" "no-signature" "Just create FileHash.  No GPG signing."

Parse_Options "$@"
shift $parsedArguments

GPG_opts="--keyring ${GPG_gobo_keyring}"

if Is_Entry_Set "local-user" 
then
   localuser=`Entry "local-user"`
   GPG_opts="${GPG_opts} -u $localuser"
fi

########## Version ##########
package=`GuessProgramCase $1 $2`
if [ "$2" ]
then
   version=`Get_Version "$package" "$2"`
else
   version=`Get_Version "$package" "Current"`
fi

prefix="$goboPrograms/$package/$version"

Is_Directory "$goboPrograms/$package" || Die "Package $package does not exist."
Is_Empty "$version" && Die "Couldn't find a proper version for $package."
Is_Directory "$prefix" || Die "$package version $version is not a valid package."
cd "$prefix"

Release_Superuser

########## Functions ##########

########## Sign Resources/FileHash ##########

FileHash_loc="Resources/FileHash"
FileHash_sig="${FileHash_loc}.sig"

Log_Normal "Creating FileHash"
Gen_FileHash "$prefix" "$FileHash_loc"
Succeeded || exit 1
Boolean "no-signature" && exit 0

# Check for gpg and keyring
Can_Sign || exit 2

Log_Normal "Signing FileHash"
Sign_File "$FileHash_loc" "$FileHash_sig"
if Failed 
then
   Log_Error "Unable to sign"
   exit 3
fi

exit 0

