#!/bin/sh

##################################################
# Imports
##################################################

stdinFD=16
stdoutFD=17
eval "exec $stdinFD<&0"
eval "exec $stdoutFD<&1"

. ScriptFunctions
Import OptionParser
Import Log
Import File
Import GoboLinux
Import Process

##################################################
# Options and configuration
##################################################

helpOnNoArguments=yes
scriptDescription="Interactively update settings from defaults in Resources/Defaults/Settings"
scriptCredits="(C)2005 by David Smith. Released under the GNU GPL."
scriptUsage="[<options>] <program> [<version>]"
Add_Option_Boolean "c" "check" "Only check whether current settings differ from the defaults."
Add_Option_Boolean "r" "report" "Only report whether current settings and defaults differ."
Add_Option_Boolean "l" "list" "Only list files that differ between current settings and defaults. Don't change anything."
Add_Option_Boolean "u" "update" "Interactively update the settings (deafult)."
Add_Option_Boolean "q" "quick"  "Quickly update the settings, prompting only when necessary."
Add_Option_Boolean "d" "diffs"  "When a file has been modified, show differences."
Add_Option_Entry   "x" "cross-compile" "Use prefixes as stated by cross-config file."

Parse_Options "$@"
shift $parsedArguments

# If we're doing a quick update, we're still doing an update.
if Boolean "quick"; then
    Set_Boolean "report"
    Set_Boolean "update"
fi

if Is_Entry "cross-compile"
then
	. GoboPath Reload
fi

pdir="${goboPrograms}/`GuessProgramCase $1`"
if [ "$2" ]
then
   version="$2"
else
   version="Current"
fi

Is_Directory "$pdir" || Die "$pdir not found or is not a directory"
Is_Directory "$pdir/$version" || Die "$pdir/$version not found"

# default is list, update, and report
if [ $parsedArguments -eq 0 ]; then
       Set_Boolean "report"
       Set_Boolean "list"
       Set_Boolean "update"
fi

if Boolean "update" && ! Is_Writable "$pdir"; then
   Verify_Superuser
fi

EDITOR=${EDITOR:-vi}
PAGER=${PAGER:-less}

##################################################
# Helper functions
##################################################

function input_option() {
   echo -n "$*" >&$questionFD

   while true
   do
      read REPLY <&$stdinFD
      [ "$REPLY" != "" ] && break
   done
   REPLY="`echo $REPLY | tr '[:upper:]' '[:lower:]'`"
}

function out()
{
       # Echo to the user but without prepending the script name like LogNNN does
       echo "$@" >&$questionFD
}

function expand_dirs()
{
       local difftype file

       while read difftype file; do
               if Is_Directory "$file" && [ "$file" != "CVS" ]; then
                       find "$file" -type f | grep -v "/CVS/" |sed "s/^/$difftype /"
               else
                       echo "$difftype $file"
               fi
       done
}

function list_diffs()
{
       # List differing files in ./Settings and ./$version/Resources/
       # Defaults/Settings

       [ "$1" = "-s" ] && echo

       if Is_Directory Settings && ! Is_Directory $version/Resources/Defaults/Settings; then

               find Settings -type f \
                       | sed 's,^,del: ,'\
                       | cat -n\
                       | sed 's/^ \{4\}//;s/   / /'

       elif ! Is_Directory Settings && Is_Directory $version/Resources/Defaults/Settings; then

               find $version/Resources/Defaults/Settings -type f \
                       | sed 's,^,new: ,'\
                       | cat -n\
                       | sed 's/^ \{4\}//;s/   / /'

       else
               # Differing files are presented as "#no new|del|mod <file>"
               #  1 new: $version/Resources/Defaults/Settings/<file>
               #  2 del: Settings/<file>
               #  3 mod: Settings/<file>
               diff -rq Settings $version/Resources/Defaults/Settings\
                       | sed '
                               s,Only in \('$version'[^:]*\): \(.*\),new: \1/\2,
                               s,Only in \(Settings[^:]*\): \(.*\),del: \1/\2,
                               s,Files \([^ ]*\) and.*differ,mod: \1,'\
                       | expand_dirs\
                       | cat -n\
                       | sed "s/^ \{4\}//;s/   / /"
       fi

       [ "$1" = "-s" ] && echo
}

function files_differ()
{
       ! Quiet diff "$1" "$2"
}

function dirs_differ()
{
       ! Quiet diff -r "$1" "$2"
}

function merge_and_edit()
{
       Parameters "$@" cur default

       # Output from diff -D
       #       #ifndef ____GOBO_magic____
       #       ...old...
       #       #else /* ____GOBO_magic____ */
       #       ...new...
       #       #endif /* ____GOBO_magic____ */

       local marker="____GOBO_diff_marker____"
       local dat="($(date +%Y-%m-%d))"

       diff -D$marker $cur $default \
               | sed '
               s,#ifndef '$marker',#----- GOBO DIFF: current version '$dat' -----,
               s,#else /\* '$marker' \*/,#----- GOBO DIFF: new version '$dat' -----,
               s,#else /\* ! '$marker' \*/,#----- GOBO DIFF: current version '$dat' -----,
               s,#endif /\* [! ]*'$marker' \*/,#----- GOBO DIFF: end block '$dat' -----,
               s,#ifdef '$marker',#----- GOBO DIFF: new version '$dat' -----,'\
               > $cur.new
       cp $cur.new $cur.new.copy
       $EDITOR $cur.new >&$stdoutFD <&$stdinFD
       if ! files_differ $cur.new.copy $cur.new; then
               Log_Normal "Not changed: $cur"
               rm $cur.new
               rm $cur.new.copy
       else
               Log_Normal "Edited: $cur"
               mv $cur.new $file
               rm $cur.new.copy
       fi
}

function input_action()
{
       # Show the file and ask the user what to do.
       # New, deleted, and modified files give different alternatives.
       # Returns the selected option in $ACTION.

       Parameters "$@" num difftype file
       
       function show_changes()
       {
               echo "" >&$questionFD
               echo " $num $difftype $file" >&$questionFD
               echo "" >&$questionFD
       }

       local action=""
       while [ "$action" = "" ]; do
               REPLY=""
               case $difftype in
               new*)
                       if Boolean "quick"; then
                               action=u
                       else
                               show_changes
                               input_option "[L]ist/[V]iew/[U]se/[S]kip/[SA]Skip all? "
                               case $REPLY in
                               v) action=vn ;;
                               l|vn|u|s|sa) action=$REPLY;;
                               esac
                       fi
                       ;;
               del*)
                       if Boolean "quick"; then
                               action=s
                       else
                               show_changes
                               input_option "[L]ist/[V]iew/[D]elete/[S]kip/[SA]Skip all? "
                               case $REPLY in
                               v) action=vc ;;
                               l|vc|d|s|sa) action=$REPLY;;
                               esac
                       fi
                       ;;
               mod*)
                       if Boolean "diffs"; then
                          diff -u "${cur}" "${default}" >&$questionFD
                       fi
                       show_changes
                       input_option "[L]ist/[V]iew/[U]se new/[M]erge and edit/[S]kip/[SA]Skip all? "
                       case $REPLY in
                               v) input_option "View new [vn] or current [vc]? " ;;
                       esac
                       case $REPLY in
                               l|vn|vc|u|m|s|sa) action=$REPLY;;
                       esac
                       ;;
               esac
       done
       ACTION=$action
}

function update_one_file()
{
       # ask the user and update a single file.
       # Returns 0, $STATUS_RESTART, or $STATUS_QUIT

       Parameters "$@" num difftype cur default

       local repeat=yes
       local file_to_show=${cur:-$default}

       while [ $repeat = yes ]; do
               repeat=no
               ACTION=""
               input_action $num $type "$file_to_show"
               case $ACTION in
                       s)      case "$difftype" in
                                       mod*)    Log_Normal "Not updating $default" ;;
                                       del*)    Log_Normal "Not deleting $default" ;;
                                       new*)    Log_Normal "Not using $default" ;;
                                       *) Log_Normal "Leaving $cur" ;;
                               esac
                               ;;
                       sa)     return 1
                               ;;
                       u)      Log_Normal "Using $default"
                               mkdir -p "$(dirname $cur)"
                               cp "$default" "$cur"
                               ;;
                       m)      merge_and_edit "$cur" "$default"
                               ;;
                       d)      Log_Normal "Deleting $cur"
                               rm "$cur"
                               ;;
                       vn)     out "Viewing $default..."
                               out "-------------------------------------------------"
                               $PAGER "$default" <&$stdinFD >&$stdoutFD
                               repeat=yes
                               ;;
                       vc)     out "Viewing $cur...."
                               out "-------------------------------------------------"
                               $PAGER "$cur" <&$stdinFD >&$stdoutFD
                               repeat=yes
                               ;;
                       l)      list_diffs -s >&$questionFD
                               repeat=yes
                               ;;
               esac
       done
       return 0
}

function update_files()
{
       # Show all files. ask the user and update each one.

       local new default num type file

       # Loop through all files and handle each in turn.
       list_diffs | while read num type file; do
               if [ "$type" == "new:" ]; then
                       # From list_diffs: "#no new: $version/Resources/Defaults/Settings/<file>"
                       # get current (though yet unexistant) file by removing C/R/D/S.
                       default="$file"
                       cur=$(echo "$file" | sed 's,'$version'/Resources/Defaults/,,')
               else
                       # From list_diffs: "#no del/mod: Settings/<file>"
                       default="$version/Resources/Defaults/$file"
                       cur="$file"
               fi

               # Handle one file
               update_one_file $num $type "$cur" "$default" || return
       done
}

##############################################
# Look for differences
##############################################
curdir="$pdir/Settings"
defaultdir="$pdir/$version/Resources/Defaults/Settings"

if Is_Nonempty_Directory "$curdir"; then
       has_current=yes;
else
       has_current=no;
fi

if Is_Nonempty_Directory "$defaultdir"; then
       has_default=yes;
else
       has_default=no;
fi

diffs_found=yes;
if [ "$has_default" = "$has_current" ]; then
       if [ "$has_default" = no ] || ! dirs_differ "$curdir" "$defaultdir"; then
               diffs_found=no;
       fi
fi

##############################################
# Report differences
##############################################
if Boolean "check"; then
       # Exit with status telling if any differences were found
       [ $diffs_found = yes ]
       exit
fi

if Boolean "report"; then
       if [ $has_current = no -a $has_default = no ]; then
               Log_Normal "No settings exist"
       elif [ $has_current = no ]; then
               Log_Normal "Settings differ (no current settings exist)"
       elif [ $has_default = no ]; then
               Log_Normal "Settings differ (no default settings exist)"
       elif [ $diffs_found = yes ]; then
               Log_Normal "Current and default settings are different"
       else
               Log_Normal "Current and default settings match"
       fi
fi

[ $diffs_found = no ] && exit 0

cd "$pdir"

if Boolean "list"; then
       # list differing files
       list_diffs -s
fi

##############################################
# Update settings
##############################################
if Boolean "update"; then
       if Boolean "quick"; then #--Dan
               Log_Normal "Quick-updating settings in $pdir"
       else
               while true; do
                       Ask_Option "Update settings in $pdir [y/n]? "
                       case "$REPLY" in
                       y|Y) break ;;
                       n|N) exit 0 ;;
                       esac
               done
       fi

       if Is_Directory "$pdir/Settings"; then
               mkdir -p "$pdir/$version/Resources"
               backup=$(Unique_Name "$pdir/$version/Resources/SettingsBackup")

               Log_Normal "Backing up settings in $backup"
               cp -a "$pdir/Settings" "$backup" || Die "Failed to backup settings"
       else
               Log_Normal "No current settings. No backup made."
       fi

       update_files
fi

