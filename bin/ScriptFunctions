#!/bin/sh (source)

. GoboPath

#not sure why we add "." to PATH. causes problems with busybox.
#export PATH=.:$PATH
export PATH=$goboExecutables:$PATH
export scriptName=`basename $0`
export scriptPath=$(dirname $(readlink -f $0))
export scriptVersion=$(basename $(dirname $(readlink -f $(readlink -f $0)/..)))

bootOptions="${goboSettings}/BootScripts/Options"
[ -e "$bootOptions" ] && source "$bootOptions"
scriptOptions="${goboSettings}/Scripts/Options"
[ -e "$scriptOptions" ] && source "$scriptOptions"
userOptions="${goboUserSettings}/Scripts/Options"
[ -e "$userOptions" ] && source "$userOptions"

function Import() {
   cmd="echo \${Imported$1}"
   if ! [ `eval $cmd` ]
   then
      eval "export Imported\${$1}=\${$1}"
      if [ -e "${scriptPath}/../Functions/$1" ]
      then    . "${scriptPath}/../Functions/$1"
      elif [ -e "${goboScripts}/../Functions/$1" ]
      then      . "${goboScripts}/../Functions/$1"
      else Die "Missing import: $1"
      fi
   fi
}

function Assertion_Function() {
   local message="$1"
   shift
   if ! eval $*
   then
      Die "Assertion failed: $message"
   fi
}

# An easy and safe way to declare parameters in a function.
# Pass to this function: (a) your function's received parameters
# and (b) their names, like in 'Parameters "$@" first second'.
# Variables according to the given names will be created.
function Parameters() {
   shopt -s expand_aliases
   $assert "Invalid number of parameters" "(( $# % 2 == 0 ))"
   shopt -u expand_aliases
   entries=("$@")
   (( middle=$#/2 ))
   local i
   for (( i = 0 ; i < middle; i++ ))
   do
      eval ${entries[$[middle+i]]}'="'${entries[$i]}'"'
   done
}

# Prints an error message and exits (signaling error)
function Die() {
   Log_Error "$@"
   exit 1
}

# Prints a message and exits successfully
function Pass_Away() {
   Log_Error "$@"
   exit 0
}

Import Log
Import "Log$logMode"
