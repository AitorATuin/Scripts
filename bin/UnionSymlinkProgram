#!/bin/sh

### Imports ###################################################################

source ScriptFunctions
Import File
Import GoboLinux
Import OptionParser


### Options ###################################################################

scriptDescription="Link a program from the $goboPrograms hierarchy in the /System/Index tree"
scriptCredits="Copyright (C) 2007 Lucas C. Villa Real. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="[options] <program_name> [<program_version>]"
scriptExample="WeirdSuperLib 2.4"
scriptNotes="If no program version is specified, Current is assumed."
Parse_Options "$@"

### Operation #################################################################

if [ -z "$goboIndex" ]
then Die "You don't seem to have the /System/Index hierarchy. Use SymlinkProgram instead."
fi
if ! grep -q unionfs /proc/filesystems
then Die "This program requires unionfs support in your running kernel."
fi
if [ ! "$(Arg 1)" ]
then Die "Argument missing: specify the program name or directory."
fi
if ! Is_Writable "$goboExecutables"
then Verify_Superuser
fi

function have_limited_unionfs() {
   retval=false
   dira=`Temporary_Dir`
   dirb=`Temporary_Dir`
   dirc=`Temporary_Dir`
   mount -t unionfs -o dirs=${dira}=rw none ${dirc}
   Quiet unionctl ${dirc} --add ${dirb} || retval=true
   umount ${dirc}
   rmdir ${dira} ${dirb} ${dirc}
   $retval
}

if have_limited_unionfs
then Die "You're running a stripped version of UnionFS. Please update your kernel."
fi

package="`basename $(Arg 1) /`"
package=`GuessProgramCase $package $(Arg 2)`
packageDir="$goboPrograms/$package"
current="$packageDir/Current"
version=$(basename $(readlink -f $current) /)

if ! Is_Directory "$packageDir"
then Die "Directory $packageDir does not exist."
fi

# Gets program name and version
if [ "$(Arg 2)" ]
then
   vdir="$goboPrograms/$package/$(Arg 2)"
   Is_Directory "$vdir" || Die "There is no version $(Arg 2) for package $(Arg 1)."
   [ "$version" != "$(Arg 2)" ] && ln -sfn `basename "$vdir"` "$current"
   version="$(Arg 2)"
fi

if ! Exists "$current"
then
   youngestdir=`ls --sort=time "$packageDir" | grep -v -e "Settings" -e "Variable" -e "Current" | head -n 1`
   ln -sf "$youngestdir" "$current"
   version="$youngestdir"
fi

Log_Normal "Mounting ${package} ${version} over ${goboIndex}."

# TODO: what do we do with ${goboIndex}/Resources? GoboHide it? ;-)
if ! Quiet unionctl ${goboIndex} --list
then mount -t unionfs -o dirs=${packageDir}/${version}:rw none ${goboIndex}
else unionctl ${goboIndex} --add --mode rw ${packageDir}/${version}
fi

Log_Normal "Done."
