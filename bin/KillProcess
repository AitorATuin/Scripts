#!/bin/sh

source ScriptFunctions
Import Array
Import GoboLinux
Import Log
Import OptionParser
Import Process

### Changelog #################################################################

# 10/02/2003 - First version

### Options ###################################################################

scriptDebug=on

scriptDescription="Enhanced process killing utility."
scriptCredits="Copyright (C) 2003. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="{ -c | -m | [-n] <regexps...> }"
scriptExample=" knotify artsd kwrited"
scriptNotes="Be mindful that when matching processes by name, you are "\
"actually searching for a match in any part of the entire process command "\
"line. For example, entering 'ion' as a pattern would also match "\
"'evolution'. Furthermore, even parameters may match: a search for 'lpd' "\
"would also kill 'kwrite helpdocument.txt'."
scriptSeeAlso="pgrep(1), pkill(1), killall(1), kill(1), ps(1)"
Add_Option_Boolean "i" "interactive" "Ask for confirmation before killing "\
"a process."
Add_Option_Boolean "d" "display" "Informative output only. Do not actually "\
"kill any process."
Add_Option_Boolean "n" "name" "Kill processes by name. This is similar to "\
"killall, but names are matched to regular expressions passed "\
"as additional parameters to $scriptName. This is the default behavior "\
"if no other mode switches are passed."
Add_Option_Boolean "m" "memory" "Kill the process that is consuming the greatest "\
"amount of memory."
Add_Option_Boolean "c" "cpu" "Kill the process with the highest CPU usage level."
Add_Option_List "s" "spare" "Enter a colon-separated list of program names "\
"that should not be killed by automatic kills. Entries for this list can also "\
"be added in the killProcessSpare entry in the configuration file." ""
Parse_Options "$@"
shift $parsedArguments

Parse_Conf Scripts KillProcess.conf

### Operation #################################################################

function find_name() {
    local firstword="$1"
    local secondword="$2"

    name="${firstword}"
    [ "$name" = "kdeinit:" ] && name="${secondword}"
    basename "$name"
}

function find_process() {
    local pid="$1"

    ps -eo pid --no-headers | grep -w "$pid" &> /dev/null
}

function sure_kill() {
    local pid="$1"
    local name="$2"

    if Boolean "display"
    then
	echo "$pid $name"
	return 0
    fi

    for signal in TERM KILL
    do
	if Boolean "interactive"
	then
	    echo -n "Attempt killing process $pid ($name) by sending SIG$signal? [y/n]"
	    read reply
	    if [ "$reply" != "y" ]
	    then return 0
	    fi
	fi
        kill -$signal "$pid"
	sleep 2
	if ! find_process "$pid"
	then
    	    Log_Verbose "Killed process $pid ($name) using signal SIG$signal."
	    return 0
	fi
    done
    Log_Verbose "Failed killing process $pid ($name)."
    return 1
}

function kill_by_name() {

    result=1

    spare=("${spare[@]}" "$scriptName" "ps -eo" "FilterLines")
    ps -eo pid,cmd --no-headers | FilterLines "$@" -n "${spare[@]}" | while read line
    do
        words=($line)
        sure_kill ${words[0]} `find_name ${words[1]} ${words[2]}`
        [ $? -lt $result ] && result=$?
    done

    exit $result
}

function kill_top_process() {

    if Boolean "cpu"
    then
        key="%cpu"
    elif Boolean "memory"
    then
        key="%mem"
    else
	Die "Please specify an operation mode. See --help."
    fi

    spare=("${spare[@]}" "$scriptName" "ps -eo" "FilterLines" "sort -n -k 1" "tail -n 1")
    chosenone=(`ps -eo "$key",pid,cmd --no-headers | FilterLines -n "${spare[@]}" | sort -n -k 1 | tail -n 1`)

    sure_kill ${chosenone[1]} `find_name ${chosenone[2]} ${chosenone[3]}`

    exit
}

List_To_Array "spare" spare
spare=("${spare[@]}" "${killProcessSpare[@]}")

if Boolean "cpu" || Boolean "memory"
then
    kill_top_process
else
    kill_by_name "$@"
fi
