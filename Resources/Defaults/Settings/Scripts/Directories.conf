
# Handle GoboLinux-style goboInstall directory
# (conditional based on goboInstall defined in GoboPath)
if [ "$goboInstall" -a "$goboInstall" != "$goboPrograms" ]
then
   directoriesHandleInstall=yes
else
   directoriesHandleInstall=no
   goboInstall="$goboPrograms"
fi
# Handle GoboLinux-style Current link
directoriesHandleCurrent=yes
# Handle GoboLinux-style share/Shared conversion
directoriesHandleShared=yes
# Handle GoboLinux-style share/man -> man
directoriesHandleManuals=yes
# Use GuessProgramCase
directoriesHandleCase=yes
# Use Sandbox
directoriesSandbox=yes

installPicture="$goboInstall"
runtimePicture="$goboPrograms"

installNPicture="$goboInstall/&NAME"
installSettingsNPicture="$goboInstall/&NAME/Settings"
installVariableNPicture="$goboInstall/&NAME/Variable"

installNVPicture="$goboInstall/&NAME/&VERSION"
installSettingsNVPicture="$goboInstall/&NAME/Settings"
installVariableNVPicture="$goboInstall/&NAME/Variable"

runtimeNPicture="$goboPrograms/&NAME"
runtimeSettingsNPicture="$goboPrograms/&NAME/Settings"
runtimeVariableNPicture="$goboPrograms/&NAME/Variable"

runtimeNVPicture="$goboPrograms/&NAME/&VERSION"
runtimeSettingsNVPicture="$goboPrograms/&NAME/Settings"
runtimeVariableNVPicture="$goboPrograms/&NAME/Variable"

linkerNVPicture="/lib/ld-linux.so.2"

# Array of directories to map in UnionSandbox
unionSandbox=(
    "/Programs"
    "/System"
    "/Files"
    "/Users"
    "/Depot"
)

# Must NOT be within unionSandbox!!!!
# Mountpoint for sandbox
unionSandboxMP="/.union_mp"
# RW branch for sandbox
unionSandboxRW="/.union_rw"

